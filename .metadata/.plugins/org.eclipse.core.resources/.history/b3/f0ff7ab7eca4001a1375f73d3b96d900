package com.capgemini.lmsspringrest.stepdefinitions;

import java.util.List;

import org.junit.jupiter.api.Assertions;

import com.capgemini.lmsspringrest.dao.LibrarianStudentDAO;
import com.capgemini.lmsspringrest.dao.LibrarianStudentDAOImplementation;
import com.capgemini.lmsspringrest.dao.StudentDAO;
import com.capgemini.lmsspringrest.dao.StudentDAOImplementation;
import com.capgemini.lmsspringrest.dto.BookDetails;
import com.capgemini.lmsspringrest.dto.BooksBorrowed;
import com.capgemini.lmsspringrest.dto.RequestDetails;
import com.capgemini.lmsspringrest.dto.User;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class StudentSteps {

	private LibrarianStudentDAO dao = new LibrarianStudentDAOImplementation();
	
	private StudentDAO studentDAO = new StudentDAOImplementation();
	
	User user;
	
	BookDetails bean;
	
	RequestDetails details;
	
	BooksBorrowed borrowed;
	
	@Given("^Student is on Login page$")
	public void student_is_on_Login_page() throws Throwable {
		user = new User();
	}

	@When("^Student enters \"([^\"]*)\",\"([^\"]*)\"$")
	public void student_enters(String arg1, String arg2) throws Throwable {
		user.setEmail(arg1);
	    user.setPassword(arg2);
	}

	@Then("^Student should be logged in$")
	public void student_should_be_logged_in() throws Throwable {
		User result1 = dao.authUser("aravind@gmail.com", "Aravind@1234");
		Assertions.assertNotNull(result1);
	}

	@Given("^Student is on request book page$")
	public void student_is_on_request_book_page() throws Throwable {
		bean = new BookDetails();
	    user = new User();

	}

	@When("^BookId  and UserId are given (\\d+), (\\d+)$")
	public void bookid_and_UserId_are_given(int arg1, int arg2) throws Throwable {
		bean.setBookId(arg1);
	    user.setId(arg2);
	}

	@Then("^Book Requested Successfully$")
	public void book_Requested_Successfully() throws Throwable {
		boolean result = studentDAO.request(26,12002);
		Assertions.assertTrue(result);  
	}
	
	@Given("^Student is on returning book page$")
	public void student_is_on_returning_book_page() throws Throwable {
		borrowed = new BooksBorrowed();
		
	}

	@When("^Book  and User are given (\\d+), (\\d+)$")
	public void book_and_User_are_given(int arg1, int arg2) throws Throwable {
		 borrowed.setBookId(arg1);
		    borrowed.setuId(arg2);
	}

	@Then("^Book Returned Successfully$")
	public void book_Returned_Successfully() throws Throwable {
		boolean result = studentDAO.returnBook(26,12002);
		Assertions.assertTrue(result);  
	}
	
	@Given("^Student is on  viewing books page based on names$")
	public void student_is_on_viewing_books_page_based_on_names() throws Throwable {
		bean = new BookDetails();
	}

	@When("^student enters \"([^\"]*)\"$")
	public void student_enters(String arg1) throws Throwable {
		bean.setBookName(arg1);
	}

	@Then("^show books based on bookname$")
	public void show_books_based_on_bookname() throws Throwable {
		List<BookDetails> result = dao.searchBookByTitle("History");
		Assertions.assertNotNull(result);
	}

	@Given("^Student is on  viewing books page based on author Name$")
	public void student_is_on_viewing_books_page_based_on_author_Name() throws Throwable {
		bean = new BookDetails();
	}

	@When("^student enters author name \"([^\"]*)\"$")
	public void student_enters_author_name(String arg1) throws Throwable {
		bean.setAuthorName(arg1);
	}

	@Then("^show books based on  authorname$")
	public void show_books_based_on_authorname() throws Throwable {
		List<BookDetails> result = dao.searchBookByAuthor("Lorens");
		Assertions.assertNotNull(result);
	}

	@Given("^Student is on  viewing books page based on book id$")
	public void student_is_on_viewing_books_page_based_on_book_id() throws Throwable {
		 bean = new BookDetails();
	}

	@When("^student enters book id (\\d+)$")
	public void student_enters_book_id(int arg1) throws Throwable {
		bean.setBookId(arg1);
	}

	@Then("^show books based on  bookid$")
	public void show_books_based_on_bookid() throws Throwable {
		 List<BookDetails> result = dao.searchBookById(4);
		    Assertions.assertNotNull(result);
	}
}
