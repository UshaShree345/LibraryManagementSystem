package com.capgemini.lmsspringrest.stepdefinitions;

import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.springframework.beans.factory.annotation.Autowired;

import com.capgemini.lmsspringrest.dao.LibrarianDAO;
import com.capgemini.lmsspringrest.dao.LibrarianDAOImplementation;
import com.capgemini.lmsspringrest.dao.LibrarianStudentDAO;
import com.capgemini.lmsspringrest.dao.LibrarianStudentDAOImplementation;
import com.capgemini.lmsspringrest.dao.StudentDAO;
import com.capgemini.lmsspringrest.dto.BookDetails;
import com.capgemini.lmsspringrest.dto.BooksBorrowed;
import com.capgemini.lmsspringrest.dto.RequestDetails;
import com.capgemini.lmsspringrest.dto.User;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class LibrarianSteps {

	private LibrarianStudentDAO dao = new LibrarianStudentDAOImplementation();

	private LibrarianDAO librarianDAO = new LibrarianDAOImplementation();

	User user;
	BookDetails bean;
	RequestDetails details;
	BooksBorrowed borrowed;
	boolean status;

	@Given("^User is on registration page$")
	public void user_is_on_registration_page() throws Throwable {

		user = new User();
	}

	@When("^User enters \"([^\"]*)\",\"([^\"]*)\",\"([^\"]*)\",\"([^\"]*)\",(\\d+),\"([^\"]*)\"$")
	public void user_enters(String arg1, String arg2, String arg3, String arg4, int arg5, String arg6)
			throws Throwable {

		user.setFirstName(arg1);
		user.setLastName(arg2);
		user.setEmail(arg3);
		user.setPassword(arg4);
		user.setMobileNo(arg5);
		user.setRole(arg6);
	}

	@Then("^User should be \"([^\"]*)\"$")
	public void user_should_be(String arg1) throws Throwable {

		boolean result = dao.registerUser(user);
		Assertions.assertTrue(result);
	}

	@Given("^Librarian is on Login page$")
	public void librarian_is_on_Login_page() throws Throwable {
		user = new User();
	}

	@When("^Librarian enters \"([^\"]*)\",\"([^\"]*)\"$")
	public void librarian_enters(String arg1, String arg2) throws Throwable {
		user = dao.authUser(arg1, arg2);
	}

	@Then("^Librarian should be logged in$")
	public void librarian_should_be_logged_in() throws Throwable {
		Assertions.assertNotNull(status);
	}

	@Given("^Librarian is on adding book page$")
	public void librarian_is_on_adding_book_page() throws Throwable {
		bean = new BookDetails();
	}

	@When("^librarian enters \"([^\"]*)\",\"([^\"]*)\",\"([^\"]*)\",(\\d+),\"([^\"]*)\"$")
	public void librarian_enters(String arg1, String arg2, String arg3, int arg4, String arg5) throws Throwable {
		bean.setBookName(arg1);
		bean.setAuthorName(arg2);
		bean.setPublisherName(arg3);
		bean.setBookCategory(arg5);
		bean.setCopies(arg4);   
	}

	@Then("^Book \"([^\"]*)\"$")
	public void book(String arg1) throws Throwable {
		boolean result = librarianDAO.addBook(bean);
		Assertions.assertTrue(result);
	}

	@Given("^Librarian is on removing book page$")
	public void librarian_is_on_removing_book_page() throws Throwable {
		  bean = new BookDetails();
	}

	@When("^librarian enters (\\d+)$")
	public void librarian_enters(int arg1) throws Throwable {
		bean.setBookId(arg1);
	}

	@Then("^Book deleted successfully$")
	public void book_deleted_successfully() throws Throwable {
		boolean result = librarianDAO.removeBook(2);
		Assertions.assertTrue(result);
	}

	@Given("^Librarian is on issuing book page$")
	public void librarian_is_on_issuing_book_page() throws Throwable {
		details = new RequestDetails();
	}

	@When("^librarian enters (\\d+),(\\d+)$")
	public void librarian_enters(int arg1, int arg2) throws Throwable {
		details.setuId(arg1);
		details.setBookId(arg2);
	}

	@Then("^Book issued successfully$")
	public void book_issued_successfully() throws Throwable {
		boolean result = librarianDAO.bookIssue(12002, 26);
		Assertions.assertTrue(result);
	}
	
	@Given("^Librarian is on  viewing books page based on names$")
	public void librarian_is_on_viewing_books_page_based_on_names() throws Throwable {
		bean = new BookDetails();
	}

	@When("^librarian enters \"([^\"]*)\"$")
	public void librarian_enters(String arg1) throws Throwable {
		bean.setBookName(arg1);
	}

	@Then("^show books based on name$")
	public void show_books_based_on_name() throws Throwable {
		List<BookDetails> result = dao.searchBookByTitle("History");
		Assertions.assertNotNull(result);
	}

	@Given("^Librarian is on  viewing books page based on author Name$")
	public void librarian_is_on_viewing_books_page_based_on_author_Name() throws Throwable {
		bean = new BookDetails();
	}

	@When("^librarian enters author name \"([^\"]*)\"$")
	public void librarian_enters_author_name(String arg1) throws Throwable {
		bean.setAuthorName(arg1);
	}

	@Then("^show books based on  author name$")
	public void show_books_based_on_author_name() throws Throwable {
		List<BookDetails> result = dao.searchBookByAuthor("Lorens");
		Assertions.assertNotNull(result);
	}

	@Given("^Librarian is on  viewing books page based on book id$")
	public void librarian_is_on_viewing_books_page_based_on_book_id() throws Throwable {
		bean = new BookDetails();
	}

	@When("^librarian enters book id (\\d+)$")
	public void librarian_enters_book_id(int arg1) throws Throwable {
		bean.setBookId(arg1);
	}

	@Then("^show books based on  book id$")
	public void show_books_based_on_book_id() throws Throwable {
		List<BookDetails> result = dao.searchBookById(4);
	    Assertions.assertNotNull(result);
	}

}
